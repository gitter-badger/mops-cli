#!/usr/bin/env node --harmony

'use strict';

var program = require('commander');
var q = require('q');

var optionDescriptions = require('../lib/optionDescriptions');
var MopsConfig = require('../lib/util/MopsConfig');
var mmsUtil = require('../lib/util/mmsUtil');
var promptUtil = require('../lib/util/promptUtil');
var MetricsWriter = require('../lib/util/MetricsWriter');

var config = new MopsConfig();
var mms = mmsUtil.getClient(config);

program
  .option('-g, --groupId [groupId]', optionDescriptions.GROUP_ID)
  .option('-h, --hostId [hostId]', optionDescriptions.HOST_ID)
  .option('-G, --granularity [granularity]', optionDescriptions.GRANULARITY)
  .option('-P, --period [period]', optionDescriptions.PERIOD)
  .parse(process.argv);

promptUtil.getRequiredOptions({
    properties: {
        groupId: {
            message: optionDescriptions.GROUP_ID,
            required: true
        },
        hostId: {
            message: optionDescriptions.HOST_ID,
            required: true
        },
        granularity: {
            message: optionDescriptions.GRANULARITY,
            default: 'MINUTE',
            required: false
        },
        period: {
            message: optionDescriptions.PERIOD,
            default: 'P1DT24H',
            required: false
        }
    }
}, program.opts(), config).then(function(options) {
    exportCSV(options);
}).fail(function(err) {
    console.error('Unable to retrieve required options', err);
});

function exportCSV(options) {
    var groupId = options.groupId;
    var hostId = options.hostId;
    var granularity = options.granularity;
    var period = options.period;
    var metricsPath = '/groups/' + groupId + '/hosts/' + hostId + '/metrics';
    var metricsParams = '?granularity=' + granularity + '&period=' + period;
    var metricsWriter = new MetricsWriter();
    mms.get(metricsPath, function(err, response) {
        if (err) {
            console.error('Error retrieving metrics for '+hostId, err);
        } else {
            var metricRequests = response.results.filter(function(result) {
                return !/^MUNIN_IOSTAT/.test(result.metricName) &&
                       !/^DB_/.test(result.metricName);
            }).map(function(result) {
                return mms.get(metricsPath+'/'+result.metricName+metricsParams);
            });
            q.all(metricRequests).then(
                function(responses) {
                    responses.forEach(function(response) {
                        metricsWriter.addMetric(response);
                    });
                    console.log(metricsWriter.writeCSV());
                },
                function() {
                    console.error('Error retriving metrics for '+hostId, arguments);
                }
            );
        }
    });
}
